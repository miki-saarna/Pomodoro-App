{"version":3,"sources":["utils/duration/index.js","pomodoro/DurationSetter.js","pomodoro/IncrementDecrementButton.js","pomodoro/CurrentSessionTotalDuration.js","pomodoro/ProgressBar.js","pomodoro/AdditionalTimerFeatures.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","DurationSetter","event","time","focusOrBreak","target","name","decreaseButton","value","min","max","IncrementDecrementButton","duration","dataInfo","disable","spanClass","type","className","data-testid","onClick","disabled","CurrentSessionTotalDuration","currentSession","focusDuration","breakDuration","label","ProgressBar","session","focusSessionProgress","timeRemaining","breakSessionProgress","AdditionalTimerFeatures","progressBarHandler","givenSeconds","seconds","round","secondsToDuration","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","focus","Pomodoro","classNameToBoolean","initialFormState","isTimerRunning","useState","formData","setFormData","durationHandler","focusTime","breakTime","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","nextSession","aria-label","title","nextState","oi","Object","entries","reduce","classes","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5762a00b.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","function DurationSetter(event, time) {\n\n    // variable that indicates whether it's a 'focus' or 'break' session\n    const focusOrBreak = event.target.name;\n\n    // variable used to determine if button pressed was incremental or decremental\n    const decreaseButton = event.target.value;\n    // sets lower and upper limits for time durationif during a 'focus' session\n    if(focusOrBreak === 'focus') {\n        decreaseButton === 'decrease' ? time -= 5 : time += 5;\n        return Math.min(60, Math.max(5, time))\n    }\n\n    // sets lower and upper limits for time durationif during a 'break' session\n    if(focusOrBreak === 'break') {\n        decreaseButton === 'decrease' ? time -= 1 : time += 1;\n        return Math.min(Math.max(time, 1), 15)\n    }\n}\n\nexport default DurationSetter;","import React from \"react\";\n\nfunction IncrementDecrementButton({ duration, dataInfo, disable, value, name, spanClass }) {\n    return (\n      <button\n        type=\"button\"\n        className={`btn btn-primary ${spanClass}`}\n        data-testid={dataInfo}\n        onClick={duration}\n        disabled={disable}\n        name={name}\n        value={value}\n      >\n      </button>\n    )\n}\n\nexport default IncrementDecrementButton;","import { minutesToDuration } from \"../utils/duration/index\";\n\n// displays the total (not leftover) set duration of the current session\nfunction CurrentSessionTotalDuration({currentSession, focusDuration, breakDuration}) {\n    return currentSession?.label === 'Focusing' ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)\n  }\n\nexport default CurrentSessionTotalDuration;","function ProgressBar(session, focusDuration, breakDuration) {\n    const focusSessionProgress = 1 - (session.timeRemaining / (focusDuration * 60));\n    const breakSessionProgress = 1 - (session.timeRemaining / (breakDuration * 60));\n    return focusDuration ? focusSessionProgress : breakSessionProgress;\n}\n\nexport default ProgressBar;","import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration/index\";\nimport CurrentSessionTotalDuration from \"./CurrentSessionTotalDuration\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction AdditionalTimerFeatures({session, focusDuration, breakDuration}) {\n    const progressBarHandler = () => {\n        if(session?.label === \"Focusing\") {\n        return ProgressBar(session, focusDuration)\n        } else if(session?.label === \"On Break\") {\n        return ProgressBar(session, breakDuration)\n        }\n      }\n\n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for <CurrentSessionTotalDuration currentSession={session} focusDuration={focusDuration} breakDuration={breakDuration} /> minutes\n              \n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {/* chaining chaining operator and ternary operator */}\n              {/* {formData.session?.timeRemaining ? secondsToDuration(formData.session.timeRemaining) : 0} remaining */}\n              {/* amended original above */}\n              {session ? secondsToDuration(session.timeRemaining) : 0} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progressBarHandler() * 100} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBarHandler() * 100}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      )\n}\n\nexport default AdditionalTimerFeatures;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration/index\";\nimport DurationSetter from \"./DurationSetter\";\nimport IncrementDecrementButton from \"./IncrementDecrementButton\";\nimport AdditionalTimerFeatures from \"./AdditionalTimerFeatures\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const focus = prevState.session.label;\n  const timeRemaining = Math.max(0, prevState.session.timeRemaining - 1);\n  if(focus === 'Focusing'){\n  return {\n    ...prevState,\n    session: {\n      label: \"Focusing\",\n      timeRemaining: timeRemaining}\n  };\n} else {\n  return {\n    ...prevState,\n    session: {\n    label: \"On Break\",\n    timeRemaining: timeRemaining}\n  };\n}\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.session.label === \"Focusing\") {\n      return {\n        ...currentSession,\n        session: {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        }\n      };\n    }\n    return {\n      ...currentSession,\n      session: {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n      }\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const initialFormState = {\n    isTimerRunning: false,\n    session: null,\n    disable: true,\n    focusDuration: 25,\n    breakDuration: 5,\n  }\n  const[formData, setFormData] = useState({...initialFormState});\n  \n  const focusDuration = formData.focusDuration;\n  const breakDuration = formData.breakDuration;\n\n  // appears to have bug: button must NOT be clicked in the span-element in the center\n  const durationHandler = (event) => {\n    if(event.target.name === \"focus\") {\n      const focusTime = DurationSetter(event, focusDuration);\n      setFormData({...formData, focusDuration: focusTime})\n    } else {\n      const breakTime = DurationSetter(event, breakDuration);\n      setFormData({...formData, breakDuration: breakTime})\n    }\n  }\n\n  // stops timer when stop button is pressed; also disables stop button since timer is already stopped\n  const stopTimerHandler = () => { setFormData({...initialFormState, disable: true}) }\n  \n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => { \n      if (formData.session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setFormData(nextSession(focusDuration, breakDuration));\n      }\n      return setFormData(nextTick);\n    },\n    formData.isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setFormData((prevState) => {\n      // setting state to opposite of prevState\n      const nextState = !prevState.isTimerRunning;\n      // if time is now playing ('true')\n      if (nextState) {\n          if(prevState.session === null) {\n            return {\n              ...formData,\n              isTimerRunning: nextState,\n              disable: false,\n              session: {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            }}\n          }\n        return {...formData,\n                isTimerRunning: nextState,\n                session: prevState.session}\n      }\n      // if now paused ('false')\n      if(!nextState) {return {...formData, isTimerRunning: nextState}};\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <IncrementDecrementButton duration={durationHandler} dataInfo='decrease-focus' disable={!formData.disable} value='decrease' name='focus' spanClass='oi oi-minus' />\n              <IncrementDecrementButton duration={durationHandler} dataInfo='increase-focus' disable={!formData.disable} value='increase' name='focus' spanClass='oi oi-plus' />\n              {/* <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        data-testid='decrease-focus'\n        onClick={durationHandler}\n        disabled={!formData.disable}\n        name='focus'\n        value='decrease'\n      >\n        <span className='oi oi-plus' onClick={durationHandler} name='focus' value='decrease' type='button' /> */}\n        {/* <span className={spanClass} /> */}\n      {/* </button> */}\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n              <IncrementDecrementButton duration={durationHandler} dataInfo='decrease-break' disable={!formData.disable} value='decrease' name='break' spanClass='oi oi-minus' />\n              <IncrementDecrementButton duration={durationHandler} dataInfo='increase-break' disable={!formData.disable} value='increase' name='break' spanClass='oi oi-plus' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !formData.isTimerRunning,\n                  \"oi-media-pause\": formData.isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={stopTimerHandler}\n              disabled={formData.disable}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {/* create ternary operator to run component that displays additional timer features only when session is not null */}\n      {formData.session? <AdditionalTimerFeatures session={formData.session} focusDuration={focusDuration} breakDuration={breakDuration} /> : null}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}